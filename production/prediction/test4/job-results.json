{"assets": {"openEO.nc": {"bands": [{"name": "prediction"}], "eo:bands": [{"name": "prediction"}], "href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2505231348214682b3b032c4e071a8e6/results/assets/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/520091cece1b71f0ac73f4e4a0cf4e96/openEO.nc?expires=1748613554", "proj:bbox": [4801500, 2808500, 4806500, 2813500], "proj:epsg": 3035, "proj:shape": [500, 500], "raster:bands": [{"name": "prediction", "statistics": {"maximum": 20, "mean": 9.1460200000002, "minimum": 0, "stddev": 4.8814139508549, "valid_percent": 100}}, {"name": "unkown_band_1", "statistics": {"maximum": 0.99964809417725, "mean": 0.038425672348609, "minimum": 3.4354867583554e-13, "stddev": 0.13934725433669, "valid_percent": 100}}, {"name": "unkown_band_2", "statistics": {"maximum": 0.23592785000801, "mean": 0.0001659758544736, "minimum": 7.5625665452161e-11, "stddev": 0.0029133863701304, "valid_percent": 100}}, {"name": "unkown_band_3", "statistics": {"maximum": 0.99984657764435, "mean": 0.11429398208901, "minimum": 1.4126706915363e-08, "stddev": 0.25935972610252, "valid_percent": 100}}, {"name": "unkown_band_4", "statistics": {"maximum": 0.46590426564217, "mean": 0.0016534337280368, "minimum": 5.773301836598e-09, "stddev": 0.0092608727507856, "valid_percent": 100}}, {"name": "unkown_band_5", "statistics": {"maximum": 0.99974352121353, "mean": 0.0041767330860553, "minimum": 8.2880204435587e-12, "stddev": 0.045755945510285, "valid_percent": 100}}, {"name": "unkown_band_6", "statistics": {"maximum": 0.99999141693115, "mean": 0.21582219625471, "minimum": 5.5436788493068e-09, "stddev": 0.36275812494403, "valid_percent": 100}}, {"name": "unkown_band_7", "statistics": {"maximum": 0.9050806760788, "mean": 0.011108902707105, "minimum": 7.5181633141241e-10, "stddev": 0.04646387681425, "valid_percent": 100}}, {"name": "unkown_band_8", "statistics": {"maximum": 0.99007672071457, "mean": 0.042621990239266, "minimum": 7.934544754562e-08, "stddev": 0.12293372698718, "valid_percent": 100}}, {"name": "unkown_band_9", "statistics": {"maximum": 0.99996626377106, "mean": 0.089254410539367, "minimum": 1.8360268860818e-09, "stddev": 0.2100830291511, "valid_percent": 100}}, {"name": "unkown_band_10", "statistics": {"maximum": 0.97148728370667, "mean": 0.0014147602173331, "minimum": 3.736893780526e-11, "stddev": 0.022880887855676, "valid_percent": 100}}, {"name": "unkown_band_11", "statistics": {"maximum": 0.9935964345932, "mean": 0.044695277886766, "minimum": 8.1695411546789e-10, "stddev": 0.13555315001404, "valid_percent": 100}}, {"name": "unkown_band_12", "statistics": {"maximum": 0.92669302225113, "mean": 0.0053413527221918, "minimum": 2.2661341692043e-09, "stddev": 0.028573866982701, "valid_percent": 100}}, {"name": "unkown_band_13", "statistics": {"maximum": 0.75466096401215, "mean": 0.0023027561044883, "minimum": 6.5624763401217e-09, "stddev": 0.018555960320544, "valid_percent": 100}}, {"name": "unkown_band_14", "statistics": {"maximum": 0.52296018600464, "mean": 0.0014205150181351, "minimum": 1.6199240837622e-09, "stddev": 0.0093762652027011, "valid_percent": 100}}, {"name": "unkown_band_15", "statistics": {"maximum": 0.99994242191315, "mean": 0.42191378293481, "minimum": 3.4921718850001e-09, "stddev": 0.38768058399217, "valid_percent": 100}}, {"name": "unkown_band_16", "statistics": {"maximum": 0.65841293334961, "mean": 0.00059757000237836, "minimum": 1.6686252379827e-10, "stddev": 0.011077304456084, "valid_percent": 100}}, {"name": "unkown_band_17", "statistics": {"maximum": 0.68542587757111, "mean": 0.0016568001433268, "minimum": 3.2399186111753e-10, "stddev": 0.0084333151129173, "valid_percent": 100}}, {"name": "unkown_band_18", "statistics": {"maximum": 0.99990439414978, "mean": 0.00093603074363227, "minimum": 1.6444799300075e-08, "stddev": 0.017352225014496, "valid_percent": 100}}, {"name": "unkown_band_19", "statistics": {"maximum": 0.5013792514801, "mean": 0.00023619811668974, "minimum": 1.1017154549764e-10, "stddev": 0.0044927337692829, "valid_percent": 100}}, {"name": "unkown_band_20", "statistics": {"maximum": 0.25209295749664, "mean": 0.00040187932492634, "minimum": 2.017945532895e-11, "stddev": 0.0016036813975304, "valid_percent": 100}}, {"name": "unkown_band_21", "statistics": {"maximum": 0.72014427185059, "mean": 0.0015597741604548, "minimum": 6.1498400816262e-10, "stddev": 0.0093217884228352, "valid_percent": 100}}], "roles": ["data"], "title": "openEO.nc", "type": "application/x-netcdf"}}, "description": "Results for batch job j-2505231348214682b3b032c4e071a8e6", "extent": {"spatial": {"bbox": [[16.470311987481992, 48.19645319932689, 16.543134560818817, 48.24520065604627]]}, "temporal": {"interval": [["2023-05-31T00:00:00Z", "2023-08-01T00:00:00Z"]]}}, "id": "j-2505231348214682b3b032c4e071a8e6", "license": "proprietary", "links": [{"href": "/eodata/Global-Mosaics/Sentinel-1/S1SAR_L3_IW_MCM/2023/07/01/Sentinel-1_IW_mosaic_2023_M07_33UXP_0_0", "rel": "derived_from", "title": "Derived from /eodata/Global-Mosaics/Sentinel-1/S1SAR_L3_IW_MCM/2023/07/01/Sentinel-1_IW_mosaic_2023_M07_33UXP_0_0", "type": "application/json"}, {"href": "/eodata/Global-Mosaics/Sentinel-1/S1SAR_L3_IW_MCM/2023/06/01/Sentinel-1_IW_mosaic_2023_M06_33UXP_0_0", "rel": "derived_from", "title": "Derived from /eodata/Global-Mosaics/Sentinel-1/S1SAR_L3_IW_MCM/2023/06/01/Sentinel-1_IW_mosaic_2023_M06_33UXP_0_0", "type": "application/json"}, {"href": "/eodata/auxdata/CopDEM/COP-DEM_GLO-30-DGED/DEM1_SAR_DGE_30_20110524T164113_20140403T164309_ADS_000000_BkSe.DEM", "rel": "derived_from", "title": "Derived from /eodata/auxdata/CopDEM/COP-DEM_GLO-30-DGED/DEM1_SAR_DGE_30_20110524T164113_20140403T164309_ADS_000000_BkSe.DEM", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/14/S2B_MSIL2A_20230614T095559_N0510_R122_T33UWP_20240909T201410.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/14/S2B_MSIL2A_20230614T095559_N0510_R122_T33UWP_20240909T201410.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/06/S2A_MSIL2A_20230706T095031_N0510_R079_T33UXP_20240913T014652.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/06/S2A_MSIL2A_20230706T095031_N0510_R079_T33UXP_20240913T014652.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/09/S2A_MSIL2A_20230709T100031_N0510_R122_T33UXP_20241018T161204.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/09/S2A_MSIL2A_20230709T100031_N0510_R122_T33UXP_20241018T161204.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/01/S2B_MSIL2A_20230601T094549_N0510_R079_T33UWP_20240926T130418.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/01/S2B_MSIL2A_20230601T094549_N0510_R079_T33UWP_20240926T130418.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/14/S2B_MSIL2A_20230714T095559_N0510_R122_T33UWP_20241001T040834.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/14/S2B_MSIL2A_20230714T095559_N0510_R122_T33UWP_20241001T040834.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/11/S2B_MSIL2A_20230711T094549_N0510_R079_T33UXP_20241020T140024.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/11/S2B_MSIL2A_20230711T094549_N0510_R079_T33UXP_20241020T140024.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/19/S2A_MSIL2A_20230619T100031_N0510_R122_T33UWP_20240911T192325.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/19/S2A_MSIL2A_20230619T100031_N0510_R122_T33UWP_20240911T192325.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/29/S2A_MSIL2A_20230629T100031_N0510_R122_T33UXP_20240913T220701.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/29/S2A_MSIL2A_20230629T100031_N0510_R122_T33UXP_20240913T220701.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/26/S2A_MSIL2A_20230626T095031_N0510_R079_T33UXP_20241002T040319.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/26/S2A_MSIL2A_20230626T095031_N0510_R079_T33UXP_20241002T040319.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/06/S2A_MSIL2A_20230706T095031_N0510_R079_T33UWP_20240913T014652.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/06/S2A_MSIL2A_20230706T095031_N0510_R079_T33UWP_20240913T014652.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/29/S2A_MSIL2A_20230729T100031_N0510_R122_T33UXP_20241022T005407.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/29/S2A_MSIL2A_20230729T100031_N0510_R122_T33UXP_20241022T005407.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/26/S2A_MSIL2A_20230626T095031_N0510_R079_T33UWP_20241002T040319.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/26/S2A_MSIL2A_20230626T095031_N0510_R079_T33UWP_20241002T040319.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/19/S2A_MSIL2A_20230719T100031_N0510_R122_T33UWP_20241021T091658.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/19/S2A_MSIL2A_20230719T100031_N0510_R122_T33UWP_20241021T091658.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/31/S2B_MSIL2A_20230731T094549_N0510_R079_T33UWP_20241029T195507.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/31/S2B_MSIL2A_20230731T094549_N0510_R079_T33UWP_20241029T195507.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/16/S2A_MSIL2A_20230716T095031_N0510_R079_T33UXP_20241016T130945.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/16/S2A_MSIL2A_20230716T095031_N0510_R079_T33UXP_20241016T130945.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/29/S2A_MSIL2A_20230629T100031_N0510_R122_T33UWP_20240913T220701.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/29/S2A_MSIL2A_20230629T100031_N0510_R122_T33UWP_20240913T220701.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/04/S2B_MSIL2A_20230604T095559_N0510_R122_T33UWP_20240926T190423.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/04/S2B_MSIL2A_20230604T095559_N0510_R122_T33UWP_20240926T190423.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/16/S2A_MSIL2A_20230616T095031_N0510_R079_T33UWP_20240912T001946.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/16/S2A_MSIL2A_20230616T095031_N0510_R079_T33UWP_20240912T001946.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/04/S2B_MSIL2A_20230704T095559_N0510_R122_T33UXP_20240912T132151.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/04/S2B_MSIL2A_20230704T095559_N0510_R122_T33UXP_20240912T132151.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/11/S2B_MSIL2A_20230711T094549_N0510_R079_T33UWP_20241020T140024.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/11/S2B_MSIL2A_20230711T094549_N0510_R079_T33UWP_20241020T140024.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/09/S2A_MSIL2A_20230709T100031_N0510_R122_T33UWP_20241018T161204.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/09/S2A_MSIL2A_20230709T100031_N0510_R122_T33UWP_20241018T161204.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/16/S2A_MSIL2A_20230716T095031_N0510_R079_T33UWP_20241016T130945.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/16/S2A_MSIL2A_20230716T095031_N0510_R079_T33UWP_20241016T130945.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/29/S2A_MSIL2A_20230729T100031_N0510_R122_T33UWP_20241022T005407.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/29/S2A_MSIL2A_20230729T100031_N0510_R122_T33UWP_20241022T005407.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/01/S2B_MSIL2A_20230601T094549_N0510_R079_T33UXP_20240926T130418.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/01/S2B_MSIL2A_20230601T094549_N0510_R079_T33UXP_20240926T130418.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/21/S2B_MSIL2A_20230621T094549_N0510_R079_T33UWP_20241120T230517.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/21/S2B_MSIL2A_20230621T094549_N0510_R079_T33UWP_20241120T230517.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/14/S2B_MSIL2A_20230614T095559_N0510_R122_T33UXP_20240909T201410.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/14/S2B_MSIL2A_20230614T095559_N0510_R122_T33UXP_20240909T201410.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/19/S2A_MSIL2A_20230619T100031_N0510_R122_T33UXP_20240911T192325.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/19/S2A_MSIL2A_20230619T100031_N0510_R122_T33UXP_20240911T192325.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/16/S2A_MSIL2A_20230616T095031_N0510_R079_T33UXP_20240912T001946.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/16/S2A_MSIL2A_20230616T095031_N0510_R079_T33UXP_20240912T001946.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/21/S2B_MSIL2A_20230621T094549_N0510_R079_T33UXP_20241120T230517.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/21/S2B_MSIL2A_20230621T094549_N0510_R079_T33UXP_20241120T230517.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/04/S2B_MSIL2A_20230704T095559_N0510_R122_T33UWP_20240912T132151.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/04/S2B_MSIL2A_20230704T095559_N0510_R122_T33UWP_20240912T132151.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/31/S2B_MSIL2A_20230731T094549_N0510_R079_T33UXP_20241029T195507.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/31/S2B_MSIL2A_20230731T094549_N0510_R079_T33UXP_20241029T195507.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/14/S2B_MSIL2A_20230714T095559_N0510_R122_T33UXP_20241001T040834.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/14/S2B_MSIL2A_20230714T095559_N0510_R122_T33UXP_20241001T040834.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/19/S2A_MSIL2A_20230719T100031_N0510_R122_T33UXP_20241021T091658.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/19/S2A_MSIL2A_20230719T100031_N0510_R122_T33UXP_20241021T091658.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/14/S2B_MSIL2A_20230614T095559_N0510_R122_T33UWP_20240909T201410.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/14/S2B_MSIL2A_20230614T095559_N0510_R122_T33UWP_20240909T201410.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/06/S2A_MSIL2A_20230706T095031_N0510_R079_T33UXP_20240913T014652.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/06/S2A_MSIL2A_20230706T095031_N0510_R079_T33UXP_20240913T014652.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/09/S2A_MSIL2A_20230709T100031_N0510_R122_T33UXP_20241018T161204.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/09/S2A_MSIL2A_20230709T100031_N0510_R122_T33UXP_20241018T161204.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/11/S2B_MSIL2A_20230711T094549_N0510_R079_T33UXP_20241020T140024.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/11/S2B_MSIL2A_20230711T094549_N0510_R079_T33UXP_20241020T140024.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/14/S2B_MSIL2A_20230714T095559_N0510_R122_T33UWP_20241001T040834.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/14/S2B_MSIL2A_20230714T095559_N0510_R122_T33UWP_20241001T040834.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/01/S2B_MSIL2A_20230601T094549_N0510_R079_T33UWP_20240926T130418.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/01/S2B_MSIL2A_20230601T094549_N0510_R079_T33UWP_20240926T130418.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/19/S2A_MSIL2A_20230619T100031_N0510_R122_T33UWP_20240911T192325.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/19/S2A_MSIL2A_20230619T100031_N0510_R122_T33UWP_20240911T192325.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/29/S2A_MSIL2A_20230629T100031_N0510_R122_T33UXP_20240913T220701.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/29/S2A_MSIL2A_20230629T100031_N0510_R122_T33UXP_20240913T220701.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/26/S2A_MSIL2A_20230626T095031_N0510_R079_T33UXP_20241002T040319.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/26/S2A_MSIL2A_20230626T095031_N0510_R079_T33UXP_20241002T040319.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/06/S2A_MSIL2A_20230706T095031_N0510_R079_T33UWP_20240913T014652.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/06/S2A_MSIL2A_20230706T095031_N0510_R079_T33UWP_20240913T014652.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/29/S2A_MSIL2A_20230729T100031_N0510_R122_T33UXP_20241022T005407.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/29/S2A_MSIL2A_20230729T100031_N0510_R122_T33UXP_20241022T005407.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/26/S2A_MSIL2A_20230626T095031_N0510_R079_T33UWP_20241002T040319.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/26/S2A_MSIL2A_20230626T095031_N0510_R079_T33UWP_20241002T040319.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/19/S2A_MSIL2A_20230719T100031_N0510_R122_T33UWP_20241021T091658.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/19/S2A_MSIL2A_20230719T100031_N0510_R122_T33UWP_20241021T091658.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/31/S2B_MSIL2A_20230731T094549_N0510_R079_T33UWP_20241029T195507.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/31/S2B_MSIL2A_20230731T094549_N0510_R079_T33UWP_20241029T195507.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/16/S2A_MSIL2A_20230716T095031_N0510_R079_T33UXP_20241016T130945.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/16/S2A_MSIL2A_20230716T095031_N0510_R079_T33UXP_20241016T130945.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/29/S2A_MSIL2A_20230629T100031_N0510_R122_T33UWP_20240913T220701.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/29/S2A_MSIL2A_20230629T100031_N0510_R122_T33UWP_20240913T220701.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/04/S2B_MSIL2A_20230604T095559_N0510_R122_T33UWP_20240926T190423.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/04/S2B_MSIL2A_20230604T095559_N0510_R122_T33UWP_20240926T190423.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/16/S2A_MSIL2A_20230616T095031_N0510_R079_T33UWP_20240912T001946.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/16/S2A_MSIL2A_20230616T095031_N0510_R079_T33UWP_20240912T001946.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/04/S2B_MSIL2A_20230704T095559_N0510_R122_T33UXP_20240912T132151.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/04/S2B_MSIL2A_20230704T095559_N0510_R122_T33UXP_20240912T132151.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/11/S2B_MSIL2A_20230711T094549_N0510_R079_T33UWP_20241020T140024.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/11/S2B_MSIL2A_20230711T094549_N0510_R079_T33UWP_20241020T140024.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/16/S2A_MSIL2A_20230716T095031_N0510_R079_T33UWP_20241016T130945.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/16/S2A_MSIL2A_20230716T095031_N0510_R079_T33UWP_20241016T130945.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/09/S2A_MSIL2A_20230709T100031_N0510_R122_T33UWP_20241018T161204.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/09/S2A_MSIL2A_20230709T100031_N0510_R122_T33UWP_20241018T161204.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/29/S2A_MSIL2A_20230729T100031_N0510_R122_T33UWP_20241022T005407.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/29/S2A_MSIL2A_20230729T100031_N0510_R122_T33UWP_20241022T005407.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/01/S2B_MSIL2A_20230601T094549_N0510_R079_T33UXP_20240926T130418.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/01/S2B_MSIL2A_20230601T094549_N0510_R079_T33UXP_20240926T130418.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/21/S2B_MSIL2A_20230621T094549_N0510_R079_T33UWP_20241120T230517.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/21/S2B_MSIL2A_20230621T094549_N0510_R079_T33UWP_20241120T230517.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/14/S2B_MSIL2A_20230614T095559_N0510_R122_T33UXP_20240909T201410.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/14/S2B_MSIL2A_20230614T095559_N0510_R122_T33UXP_20240909T201410.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/19/S2A_MSIL2A_20230619T100031_N0510_R122_T33UXP_20240911T192325.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/19/S2A_MSIL2A_20230619T100031_N0510_R122_T33UXP_20240911T192325.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/16/S2A_MSIL2A_20230616T095031_N0510_R079_T33UXP_20240912T001946.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/16/S2A_MSIL2A_20230616T095031_N0510_R079_T33UXP_20240912T001946.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/06/21/S2B_MSIL2A_20230621T094549_N0510_R079_T33UXP_20241120T230517.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/06/21/S2B_MSIL2A_20230621T094549_N0510_R079_T33UXP_20241120T230517.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/04/S2B_MSIL2A_20230704T095559_N0510_R122_T33UWP_20240912T132151.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/04/S2B_MSIL2A_20230704T095559_N0510_R122_T33UWP_20240912T132151.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/31/S2B_MSIL2A_20230731T094549_N0510_R079_T33UXP_20241029T195507.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/31/S2B_MSIL2A_20230731T094549_N0510_R079_T33UXP_20241029T195507.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/14/S2B_MSIL2A_20230714T095559_N0510_R122_T33UXP_20241001T040834.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/14/S2B_MSIL2A_20230714T095559_N0510_R122_T33UXP_20241001T040834.SAFE", "type": "application/json"}, {"href": "/eodata/Sentinel-2/MSI/L2A_N0500/2023/07/19/S2A_MSIL2A_20230719T100031_N0510_R122_T33UXP_20241021T091658.SAFE", "rel": "derived_from", "title": "Derived from /eodata/Sentinel-2/MSI/L2A_N0500/2023/07/19/S2A_MSIL2A_20230719T100031_N0510_R122_T33UXP_20241021T091658.SAFE", "type": "application/json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2505231348214682b3b032c4e071a8e6/results", "rel": "self", "type": "application/json"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2505231348214682b3b032c4e071a8e6/results/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/1da3e1f1cd33f778014f8ca719484c62?expires=1748613554", "rel": "canonical", "type": "application/json"}, {"href": "http://ceos.org/ard/files/PFS/SR/v5.0/CARD4L_Product_Family_Specification_Surface_Reflectance-v5.0.pdf", "rel": "card4l-document", "type": "application/pdf"}, {"href": "https://openeo.dataspace.copernicus.eu/openeo/1.2/jobs/j-2505231348214682b3b032c4e071a8e6/results/items/YTQyMWY4NDktMmFlNi00MmQzLTkzZjAtYjQzYWEyNTY3ZjFl/520091cece1b71f0ac73f4e4a0cf4e96/openEO.nc?expires=1748613554", "rel": "item", "type": "application/geo+json"}], "openeo:status": "finished", "providers": [{"description": "This data was processed on an openEO backend maintained by VITO.", "name": "VITO", "processing:expression": {"expression": {"adddimension1": {"arguments": {"data": {"from_node": "ndvi1"}, "label": "NDVI", "name": "bands", "type": "bands"}, "process_id": "add_dimension"}, "aggregatetemporalperiod1": {"arguments": {"data": {"from_node": "mask1"}, "period": "month", "reducer": {"process_graph": {"mean1": {"arguments": {"data": {"from_parameter": "data"}}, "process_id": "mean", "result": true}}}}, "process_id": "aggregate_temporal_period"}, "apply1": {"arguments": {"data": {"from_node": "resamplespatial1"}, "process": {"process_graph": {"log1": {"arguments": {"base": 10, "x": {"from_parameter": "x"}}, "process_id": "log"}, "multiply1": {"arguments": {"x": 10, "y": {"from_node": "log1"}}, "process_id": "multiply", "result": true}}}}, "process_id": "apply"}, "apply2": {"arguments": {"data": {"from_node": "aggregatetemporalperiod1"}, "process": {"process_graph": {"runudf1": {"arguments": {"context": {"crs": "EPSG:3035", "east": 4806500, "north": 2813500, "south": 2808500, "west": 4801500}, "data": {"from_parameter": "x"}, "runtime": "Python", "udf": "import numpy as np\nimport xarray as xr\nimport logging\nfrom pyproj import Transformer\n\ndef _setup_logging():\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger(__name__)\n    return logger\n\nlogger = _setup_logging()\n\n\n\ndef apply_datacube(cube: xr.DataArray, context: dict) -> xr.DataArray:\n\n    # Pull each piece of the extent out by name\n    west  = float(context.get(\"west\" ))\n    south = float(context.get(\"south\"))\n    east  = float(context.get(\"east\" ))\n    north = float(context.get(\"north\"))\n    crs   = context.get(\"crs\")\n    if not crs:\n        raise ValueError(\"Missing 'crs' in context\")\n\n    logger.info(f\"Original extent: {west}, {south} \u2192 {east}, {north} in {crs}\")\n\n    # Convert extent to EPSG:4326 if needed\n    if crs != \"EPSG:4326\":\n        transformer = Transformer.from_crs(crs, \"EPSG:4326\", always_xy=True)\n        west, south = transformer.transform(west, south)\n        east, north = transformer.transform(east, north)\n        logger.info(f\"Transformed extent to EPSG:4326: {west}, {south} \u2192 {east}, {north}\")\n\n\n \n    # Get pixel counts\n    nx = cube.coords[\"x\"].size\n    ny = cube.coords[\"y\"].size\n\n    # Build evenly spaced lon/lat along each axis\n    lon_array = np.linspace(west, east, nx)\n    # Note: lat goes from north down to south so the orientation matches\n    lat_array = np.linspace(north, south, ny)\n\n    # Produce 2D grids\n    lon_grid, lat_grid = np.meshgrid(lon_array, lat_array)\n\n    logger.info(f\"Longitude range: {lon_grid.min()} to {lon_grid.max()}\")\n    logger.info(f\"Latitude range: {lat_grid.min()} to {lat_grid.max()}\")\n\n    # build DataArray with the same dims\n    da = xr.DataArray(\n        np.stack([lon_grid, lat_grid], axis=0),\n        dims=(\"bands\", \"y\", \"x\"),\n        coords={\n            \"bands\": [\"lon\", \"lat\"],\n            # Here we *overwrite* the x/y coords to be the new geographic grid\n            \"x\": cube.coords['x'],\n            \"y\": cube.coords['y']\n        },\n    )\n\n\n    return da"}, "process_id": "run_udf", "result": true}}}}, "process_id": "apply"}, "applydimension1": {"arguments": {"data": {"from_node": "mergecubes4"}, "dimension": "t", "process": {"process_graph": {"runudf2": {"arguments": {"data": {"from_parameter": "data"}, "runtime": "Python", "udf": "\nimport numpy as np\nimport xarray as xr\nimport logging\nfrom typing import Tuple, Dict\n\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(message)s'  # Simple format showing only the message\n)\nlogger = logging.getLogger(__name__)\n\nNORM_PERCENTILES = np.array([\n        [1.7417268007636313, 2.023298706048351],\n        [1.7261204997060209, 2.038905204308012],\n        [1.6798346251414997, 2.179592821212937],\n        [2.3828939530384052, 2.7578332604178284],\n        [1.7417268007636313, 2.023298706048351],\n        [1.7417268007636313, 2.023298706048351],\n        [1.7417268007636313, 2.023298706048351],\n        [1.7417268007636313, 2.023298706048351],\n        [1.7417268007636313, 2.023298706048351]\n    ], dtype=np.float32)\n\nEXPECTED_BANDS = [\"B02\",\"B03\",\"B04\",\"B05\",\"B06\",\"B07\",\"B08\",\"B11\",\"B12\", \"NDVI\",\n            \"VV\",\"VH\",\"DEM\",\"lon\",\"lat\"]\n\n\n#TODO move all of this out of a UDF to base openEO code\ndef normalise_vv(raster):\n    raster = np.clip(raster, -25, 0)\n    return (raster + 25) / 25\n\ndef normalise_vh(raster):\n    raster = np.clip(raster, -30, -5)\n    return (raster + 30) / 25\n\ndef normalise_longitude(raster):\n    raster = np.clip(raster, -180, 180)\n    return (raster + 180) / 360\n\ndef normalise_latitude(raster):\n    raster = np.clip(raster, -60, 60)\n    return (raster + 60) / 120\n\ndef normalise_altitude(raster):\n    raster = np.clip(raster, -400, 8000)\n    return (raster + 400) / 8400\n\ndef normalise_ndvi(raster):\n    raster = np.clip(raster, -1, 1)\n    return (raster + 1) / 2\n\ndef norm_optical(image):\n    \n    min_values = NORM_PERCENTILES[:, 0].reshape(9, 1, 1)\n    scale_values = NORM_PERCENTILES[:, 1].reshape(9, 1, 1)\n  \n    image = np.log(image * 0.005 + 1)\n    image = (image - min_values) / scale_values\n    image = np.exp(image * 5 - 1)\n    return (image / (image + 1)).astype(np.float32)\n\n\ndef validate_and_reorder_bands(\n    data: xr.DataArray,\n) -> Tuple[xr.DataArray, Dict[str, int]]:\n    \"\"\"\n    Ensure that `data` has exactly the expected bands, in the expected order.\n\n    - If bands are out of order, reorders via .sel and logs the change.\n    - If any expected band is missing, logs an error and raises ValueError.\n    - Returns (reordered_data, band_indices), where band_indices maps\n      each band name to its position in the final DataArray.\n\n    \"\"\"\n\n    current = list(data.coords[\"bands\"].values)\n\n    # reorder if needed (will KeyError if a band is missing)\n    if current != EXPECTED_BANDS:\n        try:\n            data = data.sel(bands=EXPECTED_BANDS)\n            logger.info(f\"Reordered bands from {current} to {EXPECTED_BANDS}\")\n        except KeyError:\n            missing = sorted(set(EXPECTED_BANDS) - set(current))\n            logger.error(f\"Missing required band(s): {missing}. Available: {current}\")\n            raise ValueError(f\"Missing required band(s): {missing}\")\n\n    # now guaranteed: exactly the expected bands in order\n    band_names = list(data.coords[\"bands\"].values)\n\n    # map indices\n    try:\n        band_indices = {b: band_names.index(b) for b in EXPECTED_BANDS}\n        logger.info(f\"Band indices mapped: {band_indices}\")\n    except ValueError:\n        # should never happen\n        logger.error(f\"Failed to map indices. Bands present: {band_names}\")\n        raise ValueError(f\"Band order mismatch. Expected: {EXPECTED_BANDS}, Got: {band_names}\")\n\n    return data, band_indices\n\n\n\ndef apply_datacube(cube: xr.DataArray, context: dict) -> xr.DataArray:\n    '''Normalise the input data cube for model inference.\n    - Normalises the first 9 bands using the norm function\n    - Normalises VV, VH, DEM, lon, lat separately\n    - Outputs a 15-band cube\n    '''\n    cube = cube.transpose(\"bands\", \"y\", \"x\", \"t\")\n    logger.info(f\"Received data with shape: {cube.shape} and dims: {cube.dims}\")\n    \n    #TODO check if this occurs; if data is missing instead of throwing a value error we could also pad with nans?\n    reordered, band_idx = validate_and_reorder_bands(cube)\n\n    # Convert to numpy for operations\n    vals = reordered.values\n    \n     # 1) Optical stack: first 9 bands \u2192 (9, y, x, t)\n    optical = vals[:9, ...]\n    # reshape percentiles to (9,1,1,1) so they broadcast over y,x,t\n    mins = NORM_PERCENTILES[:, 0].reshape(9, 1, 1, 1)\n    scales = NORM_PERCENTILES[:, 1].reshape(9, 1, 1, 1)\n    # reuse your norm_optical logic, but on 4D\n    normed_opt = np.log(optical * 0.005 + 1)\n    normed_opt = (normed_opt - mins) / scales\n    normed_opt = np.exp(normed_opt * 5 - 1)\n    normed_opt = (normed_opt / (normed_opt + 1)).astype(np.float32)\n\n    # 2) Per\u2010band scalar normalisations also just broadcast over t:\n    ndvi = normalise_ndvi(vals[band_idx[\"NDVI\"], ...])\n    vv   = normalise_vv(vals[band_idx[\"VV\"], ...])\n    vh   = normalise_vh(vals[band_idx[\"VH\"], ...])\n    dem  = normalise_altitude(vals[band_idx[\"DEM\"], ...])\n    lon  = normalise_longitude(vals[band_idx[\"lon\"], ...])\n    lat  = normalise_latitude(vals[band_idx[\"lat\"], ...])\n\n    # 3) Stack back into (15, y, x, t)\n    out = np.concatenate(\n        [normed_opt, ndvi[None], vv[None], vh[None], dem[None], lon[None], lat[None]],\n        axis=0\n    )\n\n    return xr.DataArray(\n        out,\n        dims=(\"bands\", \"y\", \"x\", \"t\"),\n        coords={ **reordered.coords, \"bands\": EXPECTED_BANDS }\n    )\n\n\n    \n\n    \n\n"}, "process_id": "run_udf", "result": true}}}}, "process_id": "apply_dimension"}, "applyneighborhood1": {"arguments": {"data": {"from_node": "applydimension1"}, "overlap": [{"dimension": "x", "unit": "px", "value": 16}, {"dimension": "y", "unit": "px", "value": 16}], "process": {"process_graph": {"runudf3": {"arguments": {"data": {"from_parameter": "data"}, "runtime": "Python", "udf": "import sys\nimport functools\nimport numpy as np\nimport xarray as xr\nimport logging\n\ndef _setup_logging():\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger(__name__)\n    return logger\n\nlogger = _setup_logging()\n\nsys.path.append(\"onnx_deps\")\nsys.path.append(\"onnx_models\") \n\nimport onnxruntime as ort\n# logger.info(message)\n\n# Set environment variable to allow multiple OpenMP libraries to be loaded\n#os.environ['KMP_DUPLICATE_LIB_OK'] = 'True'\n\n\n@functools.lru_cache(maxsize=1)\ndef _load_ort_session(model_name: str) -> ort.InferenceSession:\n    \"\"\"Loads an ONNX model and returns a cached ONNX runtime session.\"\"\"\n    return ort.InferenceSession(f\"onnx_models/{model_name}\")\n\ndef _preprocess(cube: xr.DataArray) -> np.ndarray:\n    \"\"\"Reorder dimensions, extract values, and sanitize NaNs/Infs.\"\"\"\n    reordered = cube.transpose(\"y\", \"x\", \"bands\")\n    img = reordered.values.astype(np.float32)[None, ...]  # \u2192 (1, y, x, bands)\n    # Replace NaN/Inf so the model sees only finite numbers\n    img = np.nan_to_num(img, nan=0.0, posinf=1e6, neginf=-1e6) #TODO how was model trained for nans?\n    logger.debug(f\"Preprocessed input shape = {img.shape}\")\n    return img, reordered.coords\n\ndef _infer(session: ort.InferenceSession, input_name: str, img: np.ndarray) -> np.ndarray:\n    \"\"\"Run ONNX inference and drop the batch dimension.\"\"\"\n    raw = session.run(None, {input_name: img})[0]  # (1, y, x, new_bands)\n    pred = np.squeeze(raw, axis=0)                # \u2192 (y, x, new_bands)\n    logger.debug(f\"Raw ONNX output shape = {pred.shape}\")\n    return pred\n\ndef _postprocess(pred: np.ndarray, coords) -> xr.DataArray:\n    \"\"\"Slice off unwanted bands, compute argmax, and rebuild DataArray.\"\"\"\n    # Drop background band (assumes it's the first channel)\n    scores = pred[..., 1:]                        # \u2192 (y, x, bands-1)\n    # Mask any residual \u00b1Inf (should be none) and NaNs\n    scores = np.where(np.isinf(scores), np.nan, scores)\n    classes = np.argmax(scores, axis=-1)          # \u2192 (y, x)\n    # Stack class + scores along 'bands'\n    out = np.concatenate([classes[..., None], scores], axis=-1)\n    y, x = coords[\"y\"], coords[\"x\"]\n    bands = np.arange(out.shape[-1])\n    return xr.DataArray(out, dims=(\"y\", \"x\", \"bands\"),\n                        coords={\"y\": y, \"x\": x, \"bands\": bands})\n\ndef apply_ml(cube: xr.DataArray, model_path: str = \"WAC_model_hansvrp.onnx\") -> xr.DataArray:\n    \"\"\"\n    Process the tile provided by openEO using the ONNX model.\n    Splits work into preprocessing, inference, and postprocessing.\n    \"\"\"\n    logger.info(f\"apply_ml received cube with shape={cube.shape}, dims={cube.dims}\")\n\n    # Preprocess\n    img, coords = _preprocess(cube)\n\n    # Inference\n    session = _load_ort_session(model_path)\n    input_name = session.get_inputs()[0].name\n    pred = _infer(session, input_name, img)\n\n    # Postprocess\n    output = _postprocess(pred, coords)\n    logger.info(f\"apply_ml returning DataArray with shape={output.shape}\")\n    return output\n\n\ndef apply_datacube(cube: xr.DataArray, context) -> xr.DataArray:\n    \"\"\"\n    Apply ONNX model to each timestep independently in the datacube.\n    \"\"\"\n    logger.info(f\"Inference, received data with shape: {cube.shape} and dims: {cube.dims}\")\n    cube = cube.transpose('y', 'x', 'bands', 't')\n\n    if 't' in cube.dims:\n        logger.info(f\"Detected time dimension 't'. Applying model for each timestep.\")\n        result = cube.groupby('t').map(apply_ml)\n        return result\n    else:\n        logger.info(f\"No time dimension detected. Applying model once.\")\n        return apply_ml(cube)"}, "process_id": "run_udf", "result": true}}}, "size": [{"dimension": "x", "unit": "px", "value": 32}, {"dimension": "y", "unit": "px", "value": 32}]}, "process_id": "apply_neighborhood"}, "loadcollection1": {"arguments": {"bands": ["VV", "VH"], "id": "SENTINEL1_GLOBAL_MOSAICS", "spatial_extent": {"crs": "EPSG:3035", "east": 4806500, "north": 2813500, "south": 2808500, "west": 4801500}, "temporal_extent": ["2023-05-31", "2023-08-01"]}, "process_id": "load_collection"}, "loadcollection2": {"arguments": {"bands": ["B02", "B03", "B04", "B05", "B06", "B07", "B08", "B11", "B12"], "id": "SENTINEL2_L2A", "properties": {"eo:cloud_cover": {"process_graph": {"lte1": {"arguments": {"x": {"from_parameter": "value"}, "y": 85}, "process_id": "lte", "result": true}}}}, "spatial_extent": {"crs": "EPSG:3035", "east": 4806500, "north": 2813500, "south": 2808500, "west": 4801500}, "temporal_extent": ["2023-06-01", "2023-08-01"]}, "process_id": "load_collection"}, "loadcollection3": {"arguments": {"bands": ["SCL"], "id": "SENTINEL2_L2A", "properties": {"eo:cloud_cover": {"process_graph": {"lte2": {"arguments": {"x": {"from_parameter": "value"}, "y": 85}, "process_id": "lte", "result": true}}}}, "spatial_extent": {"crs": "EPSG:3035", "east": 4806500, "north": 2813500, "south": 2808500, "west": 4801500}, "temporal_extent": ["2023-06-01", "2023-08-01"]}, "process_id": "load_collection"}, "loadcollection4": {"arguments": {"id": "COPERNICUS_30", "spatial_extent": {"crs": "EPSG:3035", "east": 4806500, "north": 2813500, "south": 2808500, "west": 4801500}, "temporal_extent": null}, "process_id": "load_collection"}, "mask1": {"arguments": {"data": {"from_node": "resamplespatial2"}, "mask": {"from_node": "toscldilationmask1"}}, "process_id": "mask"}, "mergecubes1": {"arguments": {"cube1": {"from_node": "apply1"}, "cube2": {"from_node": "aggregatetemporalperiod1"}}, "process_id": "merge_cubes"}, "mergecubes2": {"arguments": {"cube1": {"from_node": "mergecubes1"}, "cube2": {"from_node": "adddimension1"}}, "process_id": "merge_cubes"}, "mergecubes3": {"arguments": {"cube1": {"from_node": "mergecubes2"}, "cube2": {"from_node": "reducedimension1"}}, "process_id": "merge_cubes"}, "mergecubes4": {"arguments": {"cube1": {"from_node": "mergecubes3"}, "cube2": {"from_node": "renamelabels1"}}, "process_id": "merge_cubes"}, "ndvi1": {"arguments": {"data": {"from_node": "aggregatetemporalperiod1"}, "nir": "B08", "red": "B04"}, "process_id": "ndvi"}, "reducedimension1": {"arguments": {"data": {"from_node": "resamplespatial4"}, "dimension": "t", "reducer": {"process_graph": {"mean2": {"arguments": {"data": {"from_parameter": "data"}}, "process_id": "mean", "result": true}}}}, "process_id": "reduce_dimension"}, "renamelabels1": {"arguments": {"data": {"from_node": "resamplespatial5"}, "dimension": "bands", "target": ["lon", "lat"]}, "process_id": "rename_labels"}, "renamelabels2": {"arguments": {"data": {"from_node": "applyneighborhood1"}, "dimension": "bands", "target": ["prediction"]}, "process_id": "rename_labels"}, "resamplespatial1": {"arguments": {"align": "upper-left", "data": {"from_node": "loadcollection1"}, "method": "near", "projection": "EPSG:3035", "resolution": 10}, "process_id": "resample_spatial"}, "resamplespatial2": {"arguments": {"align": "upper-left", "data": {"from_node": "loadcollection2"}, "method": "near", "projection": "EPSG:3035", "resolution": 10}, "process_id": "resample_spatial"}, "resamplespatial3": {"arguments": {"align": "upper-left", "data": {"from_node": "loadcollection3"}, "method": "near", "projection": "EPSG:3035", "resolution": 10}, "process_id": "resample_spatial"}, "resamplespatial4": {"arguments": {"align": "upper-left", "data": {"from_node": "loadcollection4"}, "method": "bilinear", "projection": "EPSG:3035", "resolution": 10}, "process_id": "resample_spatial"}, "resamplespatial5": {"arguments": {"align": "upper-left", "data": {"from_node": "apply2"}, "method": "near", "projection": "EPSG:3035", "resolution": 10}, "process_id": "resample_spatial"}, "saveresult1": {"arguments": {"data": {"from_node": "renamelabels2"}, "format": "netCDF", "options": {}}, "process_id": "save_result", "result": true}, "toscldilationmask1": {"arguments": {"data": {"from_node": "resamplespatial3"}}, "process_id": "to_scl_dilation_mask"}}, "format": "openeo"}, "processing:facility": "openEO Geotrellis backend", "processing:software": {"Geotrellis backend": "0.66.0a3"}, "roles": ["processor"]}], "stac_extensions": ["https://stac-extensions.github.io/eo/v1.1.0/schema.json", "https://stac-extensions.github.io/file/v2.1.0/schema.json", "https://stac-extensions.github.io/processing/v1.1.0/schema.json", "https://stac-extensions.github.io/projection/v1.1.0/schema.json"], "stac_version": "1.0.0", "summaries": {}, "type": "Collection"}